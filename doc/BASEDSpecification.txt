DISCLAIMER: This file has been given the extension ".txt" for those
who have not yet ascended to the linux level.

Specifications and Requirements for the Text BASED RPG

Developed by:
RadicallyAdvancedSoftwareNGames (MMYERS and DCOUTURE)(Done with GIT)

CONTENTS
1.0 GENERAL INFROMATION
  1.1 PURPOSE
  1.2 ACRONYMS (Dave hates these)
  1.3 DEFINITIONS
2.0 REQUIREMENTS

1.0 GENERAL INFROMATION: 
  1.1 PURPOSE
    The purpose of this document is to describe and document the requirements of the Text Based RPG engine. 
  1.2 ACRONYMS
    RPG: Role Playing Game
  1.3
    RPG: A game where you take on the role of a character who does more interesting things then you do in your ordinary life.
    
2.0 REQUIREMENTS
  2.1 Easy to use interface.
  2.2 Well documented
  2.3 Able to randomly generate maps.
  2.4 Other cool stuff.
  2.5 Programmed in C++.
  


REQUIREMENTS: TODO: ???
MJM: (I can't break these down into formal requirements until we know what we
     are doing from the high level)

General description/ World Design

The world of the text based rpg has the following elements

1. Room: A room is defined as simply an Element of space in the game.
   Each room needs connections in some way to the previous room or
   a next room.

2. Player: The player is the user. The user will type commands to explore
   the room and solve puzzles, interact with non player characters etc.
   The player will have items they can hold or wear, attributes, such
   as Strength or dexterity that will help them with certain actions or
   events.

3. Non Player characters: Could be monsters, or just characters you can interact with.
   May or may not have attributes. Could be involved in puzzles. May or may not have
   loot when defeated. We could pull their speech and lines randomly from a
   machine readable file such as (JSON YAML XML). 

TODO ADD MORE



The design of this will be relatively simple. We should start simple and get 
complicated.

UI (user interface) >> BASED Backend

User interface

Consists of a command input processor. Basically the user enters
commands, these commands are parsed and handed off to the backend.

It should not take very long at all to get this running


Backend

This is where most of the work will be done.

At Poweron:

1. The backend reads machine readable files (XML JSON YAML) and generates a world from
   these files.
2. The user should be able to save the game which will produce a simple save file.


TODO DESCRIBE MORE How will we break this down into system modules.
